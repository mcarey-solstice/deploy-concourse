#!/bin/bash

source "$( dirname "$( readlink -f "${BASH_SOURCE[0]}" )" )"/helpers

## Defaults

export BOSH_API="https://bosh.io/api/v1"
export BOSH_DOWNLOADS="https://bosh.io/d"
export DEFAULT_RELEASES_BASE_URL="$BOSH_API/releases/github.com"
export DEFAULT_STEMCELL_BASE_URL="$BOSH_API/stemcells"

## Repositories

export BOSH_RELEASE_REPOSITORY=cloudfoundry/bosh
export VSPHERE_CPI_RELEASE_REPOSITORY=cloudfoundry-incubator/bosh-vsphere-cpi-release
export OS_CONF_RELEASE_REPOSITORY=cloudfoundry/os-conf-release
export UAA_RELEASE_REPOSITORY=cloudfoundry/uaa-release
export CREDHUB_RELEASE_REPOSITORY=pivotal-cf/credhub-release
export CONCOURSE_RELEASE_REPOSITORY=concourse/concourse
export GARDEN_RUNC_RELEASE_REPOSITORY=cloudfoundry/garden-runc-release
export POSTGRES_RELEASE_REPOSITORY=cloudfoundry/postgres-release
export CONSUL_RELEASE_REPOSITORY=cloudfoundry-community/consul-boshrelease
export VAULT_RELEASE_REPOSITORY=cloudfoundry-community/vault-boshrelease

export UBUNTU_STEMCELL_REPOSITORY=bosh-vsphere-esxi-ubuntu-trusty-go_agent

## Helpers

###
# Checks for a default value.  If no default is available, empty string is echoed.
#
# Warning:
#   The only defaults are currently via the url property.
#
# Environment:
#   DEFAULT_RELEASES_BASE_URL {string} The default base url for releases
#   DEFAULT_STEMCELL_BASE_URL {string} The default base url for stemcells
#
# Parameters:
#   1 (product) {string} The product identifier for variables
#   2 (type) {string:release|stemcell} The type of product we are looking for
#   3 (property) {string:url|version|sha1} The property that is being looked for
#
# Echos:
#   The default for the provided input.  Empty string if no default can be determined.
#
# Returns:
#   0 Success
#   2 The propery is url, but the type is not recognized as release or stemcell
##
function _getDefault() {
  local _product="$1"
  local _type="$2"
  local _property="$3"
  local _var

  if [ "$_property" = "url" ]; then
    case "$_type" in
      release )
        _var="$( uppercase "${_product}_RELEASE_REPOSITORY" )"
        echo "${DEFAULT_RELEASES_BASE_URL}/${!_var}"
        ;;
      stemcell )
        _var="$( uppercase "${_product}_STEMCELL_REPOSITORY" )"
        echo "${DEFAULT_STEMCELL_BASE_URL}/${!_var}"
        ;;
      * )
        echo "Error: Unknown type: $_type" >&2
        return 2
    esac
  fi

  return 0
}

###
# Checks if a value has already been provided or its default.  If no default is available, empty string is echoed.
#
# Parameters:
#   1 (product) {string} The product identifier for variables
#   2 (type) {string:release|stemcell} The type of product we are looking for
#   3 (property) {string:url|version|sha1} The property that is being looked for
#
# Echos:
#   The value already set OR the default for the provided input.  Empty string if no default can be determined.
#
# Returns:
#   0
##
function _get() {
  local _product="$1"
  local _type="$2"
  local _property="$3"

  local _var=$( uppercase "${_product}_${_type}_${_property}" )
  if [ -n "${!_var+x}" -a -n "${!_var}" ]; then
    log "Found a variable: $_var with value ${!_var}"
    # We already have a configuration
    echo "${!_var}"
  else
    log "Using default for $_var"
    # We will use the default
    _getDefault $@
  fi
}

###
# Grabs the metadata for a product.  If the version has been specified via environment variable, that version of the product will be returned rather than the latest.
#
# Parameters:
#   1 (product) {string} The product identifier for variables
#   2 (type) {string:release|stemcell} The type of product we are looking for
#
# Echos:
#   "$version $sha1 $url" for the product
#
# Returns:
#   0 Success
#   * Errors from curl
##
function _getDetails() {
  local ENDPOINT JSON PAYLOAD VERSION SHA1 RELEASE_URL
  local version

  local _product="$1"
  local _type="$2"

  local _loaded="$( uppercase "${_product}_loaded" )"
  if [ -n "${!_loaded+x}" ]; then
    log "Already loaded $_product $_type"
    return 0
  fi

  local _url="$( _get "$_product" "$_type" url )"
  local _version="$( _get "$_product" "$_type" version )"

  log "Url: $_url"

  JSON=$(curl -s --fail "$_url?all=1")
  if [ -z "${_version}" ]; then
    PAYLOAD="$( echo "$JSON" | jq '.[0]' )"
  else
    PAYLOAD="$( echo "$JSON" | jq "select(.version == \"$_version\")" )"
  fi
  # log "Payload: $PAYLOAD"

  VERSION=$(echo "$PAYLOAD" | jq -r '.version')

  local _prefix=""
  if [ "$_type" = "stemcell" ]; then
    _prefix=".regular"
  fi

  SHA1=$(echo "$PAYLOAD" | jq -r "$_prefix.sha1")
  RELEASE_URL=$(echo "$PAYLOAD" | jq -r "$_prefix.url")

  log "{ \"version\": \"$VERSION\", \"sha1\": \"$SHA1\", \"url\": \"$RELEASE_URL\" }"
  echo "$VERSION" "$SHA1" "$RELEASE_URL"

  declare -r "$_loaded"=
}

###
# Wraps _getDetails by passing 'release' as the second paramter.
#
# See:
#   _getDetails
##
function _getReleaseDetails() {
  _getDetails "$1" release
}

###
# Wraps _getDetails by passing 'stemcell' as the second paramter.
#
# See:
#   _getDetails
##
function _getStemcellDetails() {
  _getDetails "$1" stemcell
}

## Releases

###
# Grabs the bosh release metadata and exports variables accordingly.  Note that any variables already set will simply regrab the value but their values will remain the same.
#
# See:
#   _getReleaseDetails
#
# Exports:
#   BOSH_RELEASE_VERSION {string} The version metadata that will downloaded
#   BOSH_RELEASE_SHA {string} The sha metadata to compare against the download
#   BOSH_RELEASE_URL {string} The url metadata to download the product
##
function get_bosh() {
  local _load="$( _getReleaseDetails bosh )"
  read version sha1 release_url < <(echo "$_load")
  export BOSH_RELEASE_VERSION=$version
  export BOSH_RELEASE_SHA=$sha1
  export BOSH_RELEASE_URL=$release_url
}

###
# Grabs the vsphere cpi release metadata and exports variables accordingly.  Note that any variables already set will simply regrab the value but their values will remain the same.
#
# See:
#   _getReleaseDetails
#
# Exports:
#   VSPHERE_CPI_RELEASE_VERSION {string} The version metadata that will downloaded
#   VSPHERE_CPI_RELEASE_SHA {string} The sha metadata to compare against the download
#   VSPHERE_CPI_RELEASE_URL {string} The url metadata to download the product
##
function get_vsphere_cpi() {
  local _load="$( _getReleaseDetails vsphere_cpi )"
  read version sha1 release_url < <(echo "$_load")
  export VSPHERE_CPI_RELEASE_VERSION=$version
  export VSPHERE_CPI_SHA=$sha1
  export VSPHERE_CPI_URL=$release_url
}

###
# Grabs the os conf release metadata and exports variables accordingly.  Note that any variables already set will simply regrab the value but their values will remain the same.
#
# See:
#   _getReleaseDetails
#
# Exports:
#   OS_CONF_RELEASE_VERSION {string} The version metadata that will downloaded
#   OS_CONF_RELEASE_SHA {string} The sha metadata to compare against the download
#   OS_CONF_RELEASE_URL {string} The url metadata to download the product
##
function get_os_conf() {
  local _load="$( _getReleaseDetails os_conf )"
  read version sha1 release_url < <(echo "$_load")
  export OS_CONF_RELEASE_VERSION=$version
  export OS_CONF_RELEASE_SHA=$sha1
  export OS_CONF_RELEASE_URL=$release_url
}

###
# Grabs the uaa release metadata and exports variables accordingly.  Note that any variables already set will simply regrab the value but their values will remain the same.
#
# See:
#   _getReleaseDetails
#
# Exports:
#   UAA_RELEASE_VERSION {string} The version metadata that will downloaded
#   UAA_RELEASE_SHA {string} The sha metadata to compare against the download
#   UAA_RELEASE_URL {string} The url metadata to download the product
##
function get_uaa() {
  local _load="$( _getReleaseDetails uaa )"
  read version sha1 release_url < <(echo "$_load")
  export UAA_RELEASE_VERSION=$version
  export UAA_RELEASE_SHA=$sha1
  export UAA_RELEASE_URL=$release_url
}

###
# Grabs the concourse release metadata and exports variables accordingly.  Note that any variables already set will simply regrab the value but their values will remain the same.
#
# See:
#   _getReleaseDetails
#
# Exports:
#   CONCOURSE_RELEASE_VERSION {string} The version metadata that will downloaded
#   CONCOURSE_RELEASE_SHA {string} The sha metadata to compare against the download
#   CONCOURSE_RELEASE_URL {string} The url metadata to download the product
##
function get_concourse() {
  local _load="$( _getReleaseDetails concourse )"
  read version sha1 release_url < <(echo "$_load")
  export CONCOURSE_RELEASE_VERSION=$version
  export CONCOURSE_RELEASE_SHA=$sha1
  export CONCOURSE_RELEASE_URL=$release_url
}

###
# Grabs the graden runc release metadata and exports variables accordingly.  Note that any variables already set will simply regrab the value but their values will remain the same.
#
# See:
#   _getReleaseDetails
#
# Exports:
#   GARDEN_RUNC_RELEASE_VERSION {string} The version metadata that will downloaded
#   GARDEN_RUNC_RELEASE_SHA {string} The sha metadata to compare against the download
#   GARDEN_RUNC_RELEASE_URL {string} The url metadata to download the product
##
function get_garden_runc() {
  local _load="$( _getReleaseDetails garden_runc )"
  read version sha1 release_url < <(echo "$_load")
  export GARDEN_RUNC_RELEASE_VERSION=$version
  export GARDEN_RUNC_RELEASE_SHA=$sha1
  export GARDEN_RUNC_RELEASE_URL=$release_url
}

###
# Grabs the postgres release metadata and exports variables accordingly.  Note that any variables already set will simply regrab the value but their values will remain the same.
#
# See:
#   _getReleaseDetails
#
# Exports:
#   POSTGRES_RELEASE_VERSION {string} The version metadata that will downloaded
#   POSTGRES_RELEASE_SHA {string} The sha metadata to compare against the download
#   POSTGRES_RELEASE_URL {string} The url metadata to download the product
##
function get_postgres() {
  local _load="$( _getReleaseDetails postgres )"
  read version sha1 release_url < <(echo "$_load")
  export POSTGRES_RELEASE_VERSION=$version
  export POSTGRES_RELEASE_SHA=$sha1
  export POSTGRES_RELEASE_URL=$release_url
}

###
# Grabs the credhub release metadata and exports variables accordingly.  Note that any variables already set will simply regrab the value but their values will remain the same.
#
# See:
#   _getReleaseDetails
#
# Exports:
#   CREDHUB_RELEASE_VERSION {string} The version metadata that will downloaded
#   CREDHUB_RELEASE_SHA {string} The sha metadata to compare against the download
#   CREDHUB_RELEASE_URL {string} The url metadata to download the product
##
function get_credhub() {
  local _load="$( _getReleaseDetails credhub )"
  read version sha1 release_url < <(echo "$_load")
  export CREDHUB_RELEASE_VERSION=$version
  export CREDHUB_RELEASE_SHA=$sha1
  export CREDHUB_RELEASE_URL=$release_url
}

###
# Grabs the consul release metadata and exports variables accordingly.  Note that any variables already set will simply regrab the value but their values will remain the same.
#
# See:
#   _getReleaseDetails
#
# Exports:
#   CONSUL_RELEASE_VERSION {string} The version metadata that will downloaded
#   CONSUL_RELEASE_SHA {string} The sha metadata to compare against the download
#   CONSUL_RELEASE_URL {string} The url metadata to download the product
##
function get_consul() {
  local _load="$( _getReleaseDetails consul )"
  read version sha1 release_url < <(echo "$_load")
  export CONSUL_RELEASE_VERSION=$version
  export CONSUL_RELEASE_SHA=$sha1
  export CONSUL_RELEASE_URL=$release_url
}

###
# Grabs the vault release metadata and exports variables accordingly.  Note that any variables already set will simply regrab the value but their values will remain the same.
#
# See:
#   _getReleaseDetails
#
# Exports:
#   VAULT_RELEASE_VERSION {string} The version metadata that will downloaded
#   VAULT_RELEASE_SHA {string} The sha metadata to compare against the download
#   VAULT_RELEASE_URL {string} The url metadata to download the product
##
function get_vault() {
  local _load="$( _getReleaseDetails vault )"
  read version sha1 stemcell_url < <(echo "$_load")
  export VAULT_RELEASE_VERSION=$version
  export VAULT_RELEASE_SHA=$sha1
  export VAULT_RELEASE_URL=$release_url
}

###
# Grabs the ubuntu stemcell metadata and exports variables accordingly.  Note that any variables already set will simply regrab the value but their values will remain the same.
#
# See:
#   _getStemcellDetails
#
# Exports:
#   UBUNTU_STEMCELL_VERSION {string} The version metadata that will downloaded
#   UBUNTU_STEMCELL_SHA {string} The sha metadata to compare against the download
#   UBUNTU_STEMCELL_URL {string} The url metadata to download the product
##
function get_ubuntu() {
  local _load="$( _getStemcellDetails ubuntu )"
  read version sha1 stemcell_url < <(echo "$_load")
  export SC_VERSION=$version
  export STEMCELL_SHA=$sha1
  export STEMCELL_URL=$stemcell_url
}

function get_stemcell() {
  get_ubuntu
}

## Main

RELEASES="$@"
if [ -z "$RELEASES" ]; then
  RELEASES='bosh vsphere_cpi os_conf uaa concourse garden_runc postgres credhub vault ubuntu'
fi

for release in $RELEASES; do
  fn="get_$release"
  if declare -f -F $fn > /dev/null; then
    log "Getting release: $release"
    $fn
  else
    log "Unknown release: $release" >&2
    exit 3
  fi
done

#
